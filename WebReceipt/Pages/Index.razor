@page "/"
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.Util

@inject ISnackbar SnackBar
@inject AppState AppState
@inject IReceiptService ReceiptService
@inject IPaymentTypeService PaymentTypeService
@inject ICedulaService CedulaService
@inject IForm456Service Form56Service

<PageTitle>Dashboard</PageTitle>

@if (IsLoaded)
{
    <div class="d-flex flex-row gap-5 align-center justify-content-center">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="()=> SingleFilter(false, true, false)">Form 51</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="()=> SingleFilter(false, false, true)">Form 56</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="()=> SingleFilter(true, false , false)">Cedula</MudButton>
    </div>
    <Chart Config="_config"></Chart>
    <MudPaper Elevation="3" Class="d-flex flex-column position-absolute left-0 top-0 pa-2 mt-2">
        <MudText Typo="Typo.subtitle2">Total</MudText>
        <MudDivider/>
        @foreach (var receipt in Payments)
        {   
            <span>@receipt.PaymentTypeName : ₱ @ListOfReceipts.Where( e => e.PaymentTypeId == receipt.PaymentTypeId).Sum( e => e.Total).ToString("N2")</span>
        }
    </MudPaper>
    <MudIconButton OnClick="Toggle" Class="dash-setting" Size="Size.Small" Icon="@Icons.Material.Filled.Settings" Variant="Variant.Filled" Color="Color.Info"></MudIconButton>
    <MudPopover Open="@_isOpen" AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopRight" Fixed="true" Class="px-4 pt-4 width400px">
        <MudGrid Spacing="1">
            <MudItem Class="d-flex" xs="12">
                <MudIcon Class="mr-2" Icon='@Icons.Material.Filled.FilterList' Size='Size.Small' />
                <MudText Typo="Typo.button">FILTER</MudText>
            </MudItem>
            <MudItem Class="mb-2" xs="12">
                <MudDivider/>
            </MudItem> 
            <MudItem xs="2"><MudCheckBox @bind-Checked="parameter.IsDate"></MudCheckBox></MudItem>
            <MudItem xs="10">
                <MudDateRangePicker Label="Date" @bind-DateRange="parameter._dateRange" 
                IconSize='Size.Small'    
        DisableToolbar AnchorOrigin='Origin.BottomLeft' TransformOrigin='Origin.BottomRight'
                    Placeholder="Date" Variant='Variant.Outlined' Margin='Margin.Dense' Disabled="!parameter.IsDate"/>
                </MudItem>
                <MudItem xs="2"><MudCheckBox @bind-Checked="parameter.IsORNumber"></MudCheckBox></MudItem>
                <MudItem xs="10">
                    <MudTextField @bind-Value="parameter.ORNumber" Label="OR Number" Margin="Margin.Dense"
                    Variant="Variant.Outlined" Disabled="!parameter.IsORNumber"/>
                </MudItem>
                <MudItem xs="2"><MudCheckBox @bind-Checked="parameter.IsPayor"></MudCheckBox></MudItem>
                <MudItem xs="10">
                    <MudTextField @bind-Value="parameter.PayorName" Label="Payor" Margin="Margin.Dense"
                    Variant="Variant.Outlined" Disabled="!parameter.IsPayor"/>
                </MudItem>
                <MudItem xs=2><MudCheckBox @bind-Checked="parameter.IsTransactionType"></MudCheckBox></MudItem>
                <MudItem xs=10>
                <MudSelect T="PaymentTypeModel?" 
                    Class="w300px" 
                    @bind-SelectedValues="parameter.ListOfPayments" 
                    Label="Payment Type"
                    @bind-Value="pType"  
                    Clearable 
                    Margin="Margin.Dense" 
                    MultiSelectionTextFunc="@(new Func<List<string>, string>(SelectedType))"
                    IconSize='Size.Small' 
                    Dense 
                    MultiSelection 
                    Disabled='!parameter.IsTransactionType' 
                    Placeholder='Payment Type' 
                    Variant='Variant.Outlined'
                    AnchorOrigin='Origin.BottomCenter' 
                    TransformOrigin='Origin.TopCenter'>
                    @foreach (var transactionType in Payments)
                    {
                        <MudSelectItem T="PaymentTypeModel?" Value="@transactionType">@transactionType.PaymentTypeName</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="7"></MudItem>
            <MudItem xs="5">
                <MudButton OnClick="@Toggle" Class="ml-auto mr-1 mb-3" Color="Color.Default">Close</MudButton>
                <MudButton OnClick="@Filter" Class="ml-auto mr-n3 mb-3" Variant="Variant.Filled" Color="Color.Info">Filter</MudButton> 
            </MudItem>
        </MudGrid>
    </MudPopover>
}
@code
{
    bool IsLoaded = false;
    private const int InitalCount = 5;
    private PieConfig _config;
    private IEnumerable<PaymentTypeModel> Payments { get; set; }
    List<CedulaModel> ListOfCedula = new();
    List<Form56Model> ListOfForm56 = new();
    List<ReceiptModel> ListOfReceipts = new();
    FilterParameter parameter = new();
    public bool _isOpen;
    private Enums.TransactionType? tType { get; set; }
    private PaymentTypeModel? pType { get; set;} = new();

    protected override async Task OnInitializedAsync()
    {
        GlobalClass.Title = "Dashboard";
        await GetReceipts(new(), false);
        await AppState.NotifyStateChangedAsync();
    }    
    private async Task GetReceipts(FilterParameter param, bool isSingle)
    {
        IsLoaded = false;
        Task<List<ReceiptModel>> list = ReceiptService.GetListOfReceipt(param);
        await list;
        if (list.Status == TaskStatus.RanToCompletion)
        {
            ListOfReceipts = list.Result.ToList();
            Task<IEnumerable<PaymentTypeModel>> p = PaymentTypeService.GetPayments();
            await p;
            if (p.Status == TaskStatus.RanToCompletion)
            {
                if(!isSingle)
                    Payments = p.Result;
                ListOfCedula = await CedulaService.GetListOfCedula(param);
                ListOfForm56 = await Form56Service.GetListOfForm56(param);

                foreach (var cedula in ListOfCedula)
                {
                    ReceiptModel r = new();
                    r.Number = cedula.ORNumber.ToString();
                    r.Payor = cedula.Name;
                    r.DateRecorded = cedula.DateIssued;
                    r.Total = (double)cedula.Total;
                    r.PaymentTypeId = cedula.PaymentTypeId;
                    r.PaymentType = cedula.PaymentType?? new();
                    ListOfReceipts.Add(r);
                }
                foreach (var form in ListOfForm56)
                {
                    ReceiptModel r = new();
                    r.Number = form.FormNo.ToString();
                    r.Payor = form.ReceiveFrom;
                    r.DateRecorded = form.Date;
                    r.Total = (double)form.Pesos;
                    r.PaymentTypeId = form.PaymentTypeId;
                    r.PaymentType = form.PaymentType?? new();
                    ListOfReceipts.Add(r);
                }
                SetPie();
                await AppState.NotifyStateChangedAsync();
            }
        }
    }
    private string SelectedType(List<string> types)
    {
        var tTypeDescriptions = parameter.ListOfPayments
            .Where(x => x != null) // Filter out null values
            .Select(x => x.PaymentTypeName); // Select descriptions for non-null values
        var tType = string.Join(", ", tTypeDescriptions);

        return tType;
    }
    public void Toggle()
    {
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
    }
    private async Task SingleFilter(bool isCedula, bool is51, bool is56)
    {
        var param = new FilterParameter();
        param.IsTransactionType = true;
        List<PaymentTypeModel> list = new();
        if(isCedula)
        {
            var t = new PaymentTypeModel();
            t = Payments.Where( e => e.PaymentTypeName.Contains("Cedula")).FirstOrDefault();
            list.Add(t);
        }
        if(is56)
        {
            var t = new PaymentTypeModel();
            t = Payments.Where( e => e.PaymentTypeName.Contains("Form 56")).FirstOrDefault();
            list.Add(t);
        }
        if(is51)
        {
            var t = new List<PaymentTypeModel>();
            t = Payments.Where( e => !e.PaymentTypeName.Contains("Form 56") && !e.PaymentTypeName.Contains("Cedula")).ToList();
            list.AddRange(t);
        }
        param.ListOfPayments = list;
        await GetReceipts(param, true);
    }
    private async Task Filter()
    {
        await GetReceipts(parameter, false);
        Toggle();
    }

    private void SetPie()
    {
        _config = new PieConfig
        {
            Options = new PieOptions
            {
                Responsive = true,
                Legend = new Legend
                {
                    Display = false // Hide the legend
                },
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Total Transaction"
                }
            }
        };
        List<string> dynamicLabels = new List<string>();
        List<int> counts = new List<int>();

        foreach (var receipt in Payments)
        {
            int count = ListOfReceipts.Count(e => e.PaymentTypeId == receipt.PaymentTypeId);
            double total  = ListOfReceipts.Sum( e => e.Total);
            counts.Add(count);
            int totalReceipts = ListOfReceipts.Count();
            double percentage = totalReceipts > 0 ? (double)count / totalReceipts * 100 : 0;

            dynamicLabels.Add(receipt.PaymentTypeName + " (" + percentage.ToString("N2") + "%)");
        }

        foreach (string label in dynamicLabels)
        {
            _config.Data.Labels.Add(label);
        }

        PieDataset<int> dataset = new PieDataset<int>(counts.ToArray())
            {
                BackgroundColor = new[]
                {
                "#FF6384",
                "#FF9F40",
                "#FFCD56",
                "#4BC0C0",
                "#36A2EB",
                "#9966FF",
                "#FF66B2",
                "#8B4513",
                "#D3D3D3",
                "#00FFFF",
                "#FF00FF",
                "#00FF00",
                "#008080",
                "#800000",
                "#808000",
                "#000080",
                "#C0C0C0",
                "#FFD700",
                "#4B0082",
                "#FF7F50"
            }
        };


        _config.Data.Datasets.Add(dataset);
        IsLoaded = true;
        StateHasChanged();
    }
}
<style>
    .dash-setting
    {
        position: absolute;
        top: 0;
        right: 0;
        margin-right: 10px;
        margin-top: 10px;
    }
</style>
