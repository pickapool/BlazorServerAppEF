@page "/records"

@inject AppState AppState
@inject IReceiptService ReceiptService
@inject ISnackbar SnackbarService
@inject IDialogService DialogService
@inject IReportService ReportService
@inject IPaymentTypeService PaymentTypeService

@if(!isCreate)
{
<MudTable Items="ListOfReceipts"
          Dense="true" Hover="true" Height="80vh"
          Filter="new Func<ReceiptModel,bool>(FilterFunc1)"
            Loading="IsLoading"
            >
    <ToolBarContent>
        <MudText Typo="Typo.h6">Receipts</MudText>
        <MudSpacer />
        <MudMenu StartIcon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.TopLeft'
            TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small' Label='More'>
            <MudMenuItem OnClick="Toggle">
                <div class='d-flex align-center gap-2 '>
                    <MudIcon Icon='@Icons.Material.Filled.FilterList' Size='Size.Small' />
                    <MudText Typo='Typo.body2'>Filter</MudText>
                </div>
            </MudMenuItem>
            <MudMenuItem OnClick="Add">
                <div class='d-flex align-center gap-2 '>
                    <MudIcon Icon='@Icons.Material.Filled.Add' Size='Size.Small' />
                    <MudText Typo='Typo.body2'>Add</MudText>
                </div>
            </MudMenuItem>
        </MudMenu>
        <MudPopover Open="@_isOpen" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" Fixed="true" Class="none px-4 pt-4 width400px">
                <MudGrid Spacing="1">
                   <MudItem Class="d-flex" xs="12">
                        <MudIcon Class="mr-2" Icon='@Icons.Material.Filled.FilterList' Size='Size.Small' />
                        <MudText Typo="Typo.button">FILTER</MudText>
                    </MudItem>
                    <MudItem Class="mb-2" xs="12">
                        <MudDivider/>
                    </MudItem> 
                    <MudItem xs="2"><MudCheckBox @bind-Checked="parameter.IsDate"></MudCheckBox></MudItem>
                    <MudItem xs="10">
                        <MudDateRangePicker Label="Date" @bind-DateRange="parameter._dateRange" 
                        IconSize='Size.Small' DisableToolbar AnchorOrigin='Origin.BottomLeft' TransformOrigin='Origin.BottomRight'
                        Placeholder="Date" Variant='Variant.Outlined' Margin='Margin.Dense' Disabled="!parameter.IsDate"/>
                    </MudItem>
                    <MudItem xs="2"><MudCheckBox @bind-Checked="parameter.IsORNumber"></MudCheckBox></MudItem>
                    <MudItem xs="10">
                        <MudTextField @bind-Value="parameter.ORNumber" Label="OR Number" Margin="Margin.Dense"
                        Variant="Variant.Outlined" Disabled="!parameter.IsORNumber"/>
                    </MudItem>
                    <MudItem xs="2"><MudCheckBox @bind-Checked="parameter.IsPayor"></MudCheckBox></MudItem>
                    <MudItem xs="10">
                        <MudTextField @bind-Value="parameter.PayorName" Label="Payor" Margin="Margin.Dense"
                        Variant="Variant.Outlined" Disabled="!parameter.IsPayor"/>
                    </MudItem>
                    <MudItem xs=2><MudCheckBox @bind-Checked="parameter.IsTransactionType"></MudCheckBox></MudItem>
                    <MudItem xs=10>
                        <MudSelect T="PaymentTypeModel?" 
                            Class="w300px" 
                            @bind-SelectedValues="parameter.ListOfPayments" 
                            Label="Payment Type"
                            @bind-Value="pType"  
                            Clearable 
                            Margin="Margin.Dense" 
                            MultiSelectionTextFunc="@(new Func<List<string>, string>(SelectedType))"
                            IconSize='Size.Small' 
                            Dense 
                            MultiSelection 
                            Disabled='!parameter.IsTransactionType' 
                            Placeholder='Payment Type' 
                            Variant='Variant.Outlined'
                            AnchorOrigin='Origin.BottomCenter' 
                            TransformOrigin='Origin.TopCenter'>
                            @foreach (var transactionType in Payments)
                            {
                                <MudSelectItem T="PaymentTypeModel?" Value="@transactionType">@transactionType.PaymentTypeName</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="7"></MudItem>
                    <MudItem xs="5">
                        <MudButton OnClick="@Toggle" Class="ml-auto mr-1 mb-3" Color="Color.Default">Close</MudButton>
                        <MudButton OnClick="@Filter" Class="ml-auto mr-n3 mb-3" Variant="Variant.Filled" Color="Color.Info">Filter</MudButton> 
                    </MudItem>
                </MudGrid>
            </MudPopover>
    </ToolBarContent>
    <ColGroup>
    <col/>
    <col/>
    <col/>
    <col/>
    <col/>
    <col style="width: 10px;"/>
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="f_number" T="ReceiptModel">OR No.</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="f_payor" T="ReceiptModel">Payor</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="f_date" T="ReceiptModel">Date</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="f_agency" T="ReceiptModel">Transaction Type</MudTableSortLabel></MudTh>
        <MudTh>Total</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Number">@context.Number</MudTd>
        <MudTd DataLabel="Payor">@context.Payor</MudTd>
        <MudTd DataLabel="Date">@context.DateRecorded?.ToString("MM/dd/yyyy hh:mm tt")</MudTd>
         <MudTd DataLabel="Agency">@context.PaymentType.PaymentTypeName</MudTd>
        <MudTd Class="text-end" DataLabel="Fund">â‚± @context.Total.ToString("N2")</MudTd>
        <MudTd>
            <MudMenu Icon="@Icons.Material.Filled.MoreVert" AnchorOrigin="Origin.TopLeft" TransformOrigin="Origin.TopRight" Size="Size.Small">
                <MudMenuItem OnClick="()=> Remove(context)">
                    <MudIcon Icon="@Icons.Material.Filled.DeleteForever" Size="Size.Medium"></MudIcon>
                    <span>Remove</span>
                </MudMenuItem>
                <MudMenuItem OnClick="()=> EditRecord(context)">
                    <MudIcon Icon="@Icons.Material.Filled.Edit" Size="Size.Medium"></MudIcon>
                    <span>Edit</span>
                </MudMenuItem>
                <MudMenuItem OnClick="()=> GetReport(context)">
                        <MudIcon Icon="@Icons.Material.Filled.LocalPrintshop" Size="Size.Medium"></MudIcon>
                    <span>Print</span>
                </MudMenuItem>
            </MudMenu>
        </MudTd>
    </RowTemplate>
    <ChildRowContent>
        @if(context.IsShowReceipt)
        {
            <td class="pa-1" colspan="6">
                <div class="d-flex flex-column justify-content-end gap-1 w-100">
                    <MudButton OnClick="()=> context.IsShowReceipt = !context.IsShowReceipt" Class="ml-auto mr-1 mb-3" Variant="Variant.Filled" Color="Color.Error" Label="true">Close</MudButton>
                    <iframe src='@context.PDF' style='height:81vh;' />
                </div>
            </td>
        }
    </ChildRowContent>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
    </MudTable>
} else
{
    <div class="d-flex justify-center">
    <MudPaper Class="d-flex flex-column pa-4" Elevation="4" Height="86vh" Width="80%">
        <MudText Class="text-center">Receipt Form</MudText>
        <MudGrid Spacing="0">
            <MudItem xs="4">
                <MudDatePicker Class="mr-1" @bind-Date="ReceiptModel.DateRecorded" Label="Date" Margin="Margin.Dense"></MudDatePicker>
            </MudItem>
            <MudItem xs="4">
                <MudTextField Class="ml-1" @bind-Value="ReceiptModel.Number" Label="No." Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudItem xs="4">
                <MudSelect Class="mr-1" @bind-Value="ReceiptModel.PaymentType" Text="ReceiptModel.PaymentType" Placeholder="Transaction Type" Margin='Margin.Dense'
                    AnchorOrigin="Origin.BottomCenter">
                    @foreach (var type in Payments.Where( e => e.PaymentTypeName != "Cedula" && e.PaymentTypeName != "Form 56").ToList())
                    {
                        <MudSelectItem Value="@type">@type.PaymentTypeName</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <MudTextField Class="mr-1" @bind-Value="ReceiptModel.Agency" Label="Agency" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudItem xs="6">
                <MudTextField Class="ml-1" @bind-Value="ReceiptModel.Payor" Label="Payor" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value="ReceiptModel.Fund" Label="Funds" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudItem xs="12">
                <MudTable Class="nature-table mt-1" Items="ReceiptModel.ListOfNatures" Dense Hover FixedHeader FixedFooter
                           RowEditCommit='( (object model) => Total((NatureOfCollectionModel)model))' Height="200px">
                     <ToolBarContent>
                         <MudText Typo="Typo.body1">Nature of Colletions - </MudText>
                         <MudText Class="fw-bolder" Typo="Typo.caption">Total @ReceiptModel.ListOfNatures.Sum(e => e.Amount).ToString("N2")</MudText>
                            <MudSpacer />
                            <MudIconButton OnClick="AddNew" Icon="@Icons.Material.Filled.Add" Size="Size.Small"></MudIconButton>
                        </ToolBarContent>
                        <ColGroup>
                            <col />
                            <col />
                            <col />
                            <col style="width: 10px !important;" />
                        </ColGroup>
                        <HeaderContent>
                            <MudTh>Nature</MudTh>
                            <MudTh>Account Code</MudTh>
                            <MudTh Class="text-center">Amount</MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Nature">@context.NatureName</MudTd>
                            <MudTd DataLabel="Code">@context.AccountCode</MudTd>
                            <MudTd Class="text-center" DataLabel="Amount">@context.Amount</MudTd>
                            <MudTd DataLabel="Action">
                                <MudIconButton OnClick="(()=> { ReceiptModel.ListOfNatures.Remove(context); })" Icon="@Icons.Material.Filled.RemoveCircle" Size="Size.Small"></MudIconButton>
                            </MudTd>
                        </RowTemplate>
                        <RowEditingTemplate>
                            <MudTd DataLabel="Nature">
                                <MudTextField @bind-Value="@context.NatureName" Margin="Margin.Dense"></MudTextField>
                            </MudTd>
                            <MudTd DataLabel="Nature">
                                <MudTextField @bind-Value="@context.AccountCode" Margin="Margin.Dense"></MudTextField>
                            </MudTd>
                            <MudTd DataLabel="Nature">
                                <MudTextField Class="text-center" @bind-Value="@context.Amount" Format="N2" Margin="Margin.Dense"></MudTextField>
                            </MudTd>
                        </RowEditingTemplate>
                    </MudTable>
                </MudItem>
                <MudItem xs="4">
                    <MudCheckBox @bind-Checked="ReceiptModel.Cash" Size="Size.Small" Label="Cash"></MudCheckBox>
                </MudItem>
                <MudItem xs="4">
                    <MudCheckBox @bind-Checked="ReceiptModel.Check" Size="Size.Small" Label="Check"></MudCheckBox>
                </MudItem>
                <MudItem xs="4">
                    <MudCheckBox @bind-Checked="ReceiptModel.MoneyOrder" Size="Size.Small" Label="Money Order"></MudCheckBox>
                </MudItem>
                <MudItem xs="4">
                    <MudTextField Class="mr-1" @bind-Value="ReceiptModel.DraweeBank" Label="Drawee Bank" Margin="Margin.Dense"></MudTextField>
                </MudItem>
                <MudItem xs="4">
                    <MudTextField Class="ml-1 mr-1" @bind-Value="ReceiptModel.DraweeNumber" Label="Drawee Number" Margin="Margin.Dense"></MudTextField>
                </MudItem>
                <MudItem xs="4">
                    <MudDatePicker Class="mr-1" @bind-Date="ReceiptModel.DraweeDate" Label="Drawee Date" Margin="Margin.Dense"></MudDatePicker>
                </MudItem>
                <MudItem xs="6"></MudItem>
                <MudItem xs="6">
                    <MudTextField @bind-Value="ReceiptModel.CollectionOfficer" Label="Collection Officer" Margin="Margin.Dense"></MudTextField>
                </MudItem>
                <MudItem xs="12" Class="d-flex justify-content-center align-items-center mt-4">
                    <MudButton OnClick="Cancel" Class="center" Size="Size.Small" Color="Color.Error" Variant="Variant.Text">Cancel</MudButton>
                    <MudButton OnClick="AddReceipt" Class="center" Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled">
                        @(ReceiptModel.ReceiptId == 0 ? "Add Receipt" : "Update Receipt")
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>
        </div>
}
@code{
    List<ReceiptModel> ListOfReceipts = new();
    private ReceiptModel ReceiptModel = new();
    private IEnumerable<PaymentTypeModel> Payments;
    private string searchString1 = "";
    private bool IsLoading = false;
    public bool _isOpen, isCreate;
    private Enums.TransactionType? tType { get; set; }
    private PaymentTypeModel? pType { get; set;} = new();
    FilterParameter parameter = new();
    protected override async Task OnInitializedAsync()
    {
        GlobalClass.Title = "Records";
        await AppState.NotifyStateChangedAsync();
        await GetReceipts(new());
    }
    private async Task GetReceipts(FilterParameter param)
    {
        IsLoading = true;
        StateHasChanged();
        Task<List<ReceiptModel>> list = ReceiptService.GetListOfReceipt(param);
        await list;
        if(list.Status == TaskStatus.RanToCompletion)
        {
            ListOfReceipts = list.Result.ToList();
            Task<IEnumerable<PaymentTypeModel>> p = PaymentTypeService.GetPayments();
            await p;
            if(p.Status == TaskStatus.RanToCompletion)
            {
                Payments = p.Result;
                IsLoading = false;
            }
        }
    }
    private bool FilterFunc1(ReceiptModel element) => FilterFunc(element, searchString1);

    private bool FilterFunc(ReceiptModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Number.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Agency.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Payor.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Fund.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.CollectionOfficer.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.DraweeBank.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.DraweeNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    private async Task Remove(ReceiptModel model)
    {
        await ReceiptService.RemoveReceipt(model);
        await GetReceipts(new());
        Extensions.ShowSnackbar("Receipt has been remove", Variant.Filled, SnackbarService, Severity.Success);
    }
    private async Task EditRecord(ReceiptModel model)
    {
        ReceiptModel = model;
        isCreate = true;
        StateHasChanged();
        // var parameters = new DialogParameters();
        // parameters.Add("ReceiptModel", model);
        // var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Small, FullWidth = true, NoHeader = false, DisableBackdropClick = false };
        // var resultDialog = await DialogService.Show<Components.ReceiptForm>("", parameters, options).Result;
        // if (!resultDialog.Canceled)
        // {
        //     await GetReceipts(new());
        // }
    }
    private void GetReport(ReceiptModel receipt)
    {
        IsLoading = true;
        StateHasChanged();
        receipt.IsShowReceipt = !receipt.IsShowReceipt;
        receipt.PaymentTypeName = receipt.PaymentType.PaymentTypeName;
        IActionResult report = ReportService.GetMasterListReport(receipt);
        if (report is FileContentResult fileContentResult)
        {
            byte[] pdfBytes = fileContentResult.FileContents;
            receipt.PDF = "data:application/pdf;base64," + Convert.ToBase64String(pdfBytes);
            IsLoading = false;
        }

    }
    public void Toggle()
    {
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
    }
    private async Task Filter()
    {
        await GetReceipts(parameter);
        Toggle();
    }
    private string SelectedType(List<string> types)
    {
        var tTypeDescriptions = parameter.ListOfPayments
            .Where(x => x != null) // Filter out null values
            .Select(x => x.PaymentTypeName); // Select descriptions for non-null values
        var tType = string.Join(", ", tTypeDescriptions);

        return tType;
    }
    private void Add()
    {
        if (!isCreate)
            ReceiptModel = new();
        ReceiptModel.CollectionOfficer = GlobalClass.UserAccount.EmployeeName;
        isCreate = true;
        StateHasChanged();
    }
    private void Total(NatureOfCollectionModel model)
    {
        if (model != null)
        {
            ReceiptModel.Total = ReceiptModel.ListOfNatures.Sum(e => e.Amount);
        }
    }
    private void AddNew()
    {
        ReceiptModel.ListOfNatures.Add(new());
        StateHasChanged();
    }
    private async Task AddReceipt()
    {
        ReceiptModel.Total = ReceiptModel.ListOfNatures.Sum(e => e.Amount);
        Task t = ReceiptModel.ReceiptId == 0 ? ReceiptService.AddReceipt(ReceiptModel) : ReceiptService.UpdateReceipt(ReceiptModel);
        await t;
        if (t.Status == TaskStatus.RanToCompletion)
        {
            Extensions.ShowSnackbar("Receipt has been save.", Variant.Filled, SnackbarService, Severity.Success);
            await OnInitializedAsync();
        }
        isCreate = false;
        StateHasChanged();
    }
    private void Cancel()
    {
        ReceiptModel = new();
        isCreate = false;
        StateHasChanged();
    }

}