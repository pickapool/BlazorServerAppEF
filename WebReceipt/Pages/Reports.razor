@page "/reports"

@inject AppState AppState
@inject IReceiptService ReceiptService
@inject ISnackbar SnackbarService
@inject IReportService ReportService

<MudTable Items="ListOfReceipts"
          Dense="true" Hover="true" Height="80vh"
          Filter="new Func<ReceiptModel,bool>(FilterFunc1)"
            Loading="IsLoading"
            >
    <ToolBarContent>
        <MudText Typo="Typo.h6">Receipts</MudText>
        <MudSpacer />
        <MudMenu StartIcon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.TopLeft'
            TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small' Label='More'>
            <MudMenuItem OnClick="Toggle">
                <div class='d-flex align-center gap-2 '>
                    <MudIcon Icon='@Icons.Material.Filled.FilterList' Size='Size.Small' />
                    <MudText Typo='Typo.body2'>Filter</MudText>
                </div>
            </MudMenuItem>
        </MudMenu>
        <MudPopover Open="@_isOpen" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" Fixed="true" Class="px-4 pt-4 width400px">
                <MudGrid Spacing="1">
                   <MudItem Class="d-flex" xs="12">
                        <MudIcon Class="mr-2" Icon='@Icons.Material.Filled.FilterList' Size='Size.Small' />
                        <MudText Typo="Typo.button">FILTER</MudText>
                    </MudItem>
                    <MudItem Class="mb-2" xs="12">
                        <MudDivider/>
                    </MudItem> 
                    <MudItem xs="2"><MudCheckBox @bind-Checked="parameter.IsDate"></MudCheckBox></MudItem>
                    <MudItem xs="10">
                        <MudDateRangePicker Label="Date" @bind-DateRange="parameter._dateRange" 
                        IconSize='Size.Small' DisableToolbar AnchorOrigin='Origin.BottomLeft' TransformOrigin='Origin.BottomRight'
                        Placeholder="Date" Variant='Variant.Outlined' Margin='Margin.Dense' Disabled="!parameter.IsDate"/>
                    </MudItem>
                    <MudItem xs="2"><MudCheckBox @bind-Checked="parameter.IsORNumber"></MudCheckBox></MudItem>
                    <MudItem xs="10">
                        <MudTextField @bind-Value="parameter.ORNumber" Label="OR Number" Margin="Margin.Dense"
                        Variant="Variant.Outlined" Disabled="!parameter.IsORNumber"/>
                    </MudItem>
                    <MudItem xs="2"><MudCheckBox @bind-Checked="parameter.IsPayor"></MudCheckBox></MudItem>
                    <MudItem xs="10">
                        <MudTextField @bind-Value="parameter.PayorName" Label="Payor" Margin="Margin.Dense"
                        Variant="Variant.Outlined" Disabled="!parameter.IsPayor"/>
                    </MudItem>
                    <MudItem xs=2><MudCheckBox @bind-Checked="parameter.IsTransactionType"></MudCheckBox></MudItem>
                    <MudItem xs=10>
                        <MudSelect T="Enums.TransactionType" Class="w300px" @bind-SelectedValues="parameter.ListOfTransaction" Label="Transaction Type"
                            @bind-Value="tType"  Clearable Margin="Margin.Dense" MultiSelectionTextFunc="@(new Func<List<string>, string>(SelectedType))"
                            IconSize='Size.Small' Dense MultiSelection Disabled='!parameter.IsTransactionType' Placeholder='Transaction Type' Variant='Variant.Outlined'
                            AnchorOrigin='Origin.BottomCenter' TransformOrigin='Origin.TopCenter'>
                           @foreach (Enums.TransactionType transactionType in Enum.GetValues(typeof(Enums.TransactionType)))
                            {
                                <MudSelectItem Value="@transactionType">@Extensions.GetEnumDescription(transactionType)</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="7"></MudItem>
                    <MudItem xs="5">
                        <MudButton OnClick="@Toggle" Class="ml-auto mr-1 mb-3" Color="Color.Default">Close</MudButton>
                        <MudButton OnClick="@Filter" Class="ml-auto mr-n3 mb-3" Variant="Variant.Filled" Color="Color.Info">Filter</MudButton> 
                    </MudItem>
                </MudGrid>
            </MudPopover>
    </ToolBarContent>
    <ColGroup>
    <col style="width: 120px;"/>
    <col/>
    <col style="width: 190px;"/>
    <col/>
    <col/>
    <col/>
    <col/>
    <col/>
    <col/>
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="f_number" T="ReceiptModel">OR No.</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="f_payor" T="ReceiptModel">Payor</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="f_date" T="ReceiptModel">Date</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="f_fund" T="ReceiptModel">Chair Rental</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="f_fund" T="ReceiptModel">Mayor's permit</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="f_fund" T="ReceiptModel">Laboratory</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="f_fund" T="ReceiptModel">Electrical Payment</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="f_fund" T="ReceiptModel">Water Billing</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="f_fund" T="ReceiptModel">Market Stall</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Number">
            <div class="chip-number pa-1">
                @context.Number
            </div>
        </MudTd>
        <MudTd DataLabel="Payor">@context.Payor</MudTd>
        <MudTd DataLabel="Date">@context.DateRecorded?.ToString("MM/dd/yyyy hh:mm tt")</MudTd>
        <MudTd Class="text-end" DataLabel="Fund">@(context.TransactionType == Enums.TransactionType.ChairRental ? "₱ "+ @context.Total.ToString("N2") : "")</MudTd>
        <MudTd Class="text-end" DataLabel="Fund">@(context.TransactionType == Enums.TransactionType.Mayors ? "₱ "+ @context.Total.ToString("N2") : "")</MudTd>
        <MudTd Class="text-end" DataLabel="Fund">@(context.TransactionType == Enums.TransactionType.Laboratory ? "₱ "+ @context.Total.ToString("N2") : "")</MudTd>
        <MudTd Class="text-end" DataLabel="Fund">@(context.TransactionType == Enums.TransactionType.Electrilcal ? "₱ "+ @context.Total.ToString("N2") : "")</MudTd>
        <MudTd Class="text-end" DataLabel="Fund">@(context.TransactionType == Enums.TransactionType.WaterBilling ? "₱ "+ @context.Total.ToString("N2") : "")</MudTd>
        <MudTd Class="text-end" DataLabel="Fund">@(context.TransactionType == Enums.TransactionType.MarketStall ? "₱ "+ @context.Total.ToString("N2") : "")</MudTd>
        @* <MudTd Class="text-end" DataLabel="Fund">₱ @context.Total.ToString("N2")</MudTd> *@
                @* <MudTd DataLabel="Agency">@Extensions.GetEnumDescription(context.TransactionType)</MudTd> *@
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code{
    List<ReceiptModel> ListOfReceipts = new();
    private string searchString1 = "";
    private bool IsLoading = false;
    public bool _isOpen;
    private Enums.TransactionType tType { get; set; }
    private IEnumerable<Enums.TransactionType> options { get; set; } = new HashSet<Enums.TransactionType>();
    FilterParameter parameter = new();
    protected override async Task OnInitializedAsync()
    {
        GlobalClass.Title = "Reports";
        await AppState.NotifyStateChangedAsync();
        await GetReceipts(new());
    }
    private async Task GetReceipts(FilterParameter param)
    {
        IsLoading = true;
        StateHasChanged();
        Task<List<ReceiptModel>> list = ReceiptService.GetListOfReceipt(param);
        await list;
        if(list.Status == TaskStatus.RanToCompletion)
        {
            ListOfReceipts = list.Result.ToList();
            IsLoading  = false;
        }
    }
    private bool FilterFunc1(ReceiptModel element) => FilterFunc(element, searchString1);

    private bool FilterFunc(ReceiptModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Number.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Agency.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Payor.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Fund.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.CollectionOfficer.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.DraweeBank.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.DraweeNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    private void GetReport(ReceiptModel receipt)
    {
        IsLoading = true;
        StateHasChanged();
        receipt.IsShowReceipt = !receipt.IsShowReceipt;
        IActionResult report = ReportService.GetMasterListReport(receipt);
        if (report is FileContentResult fileContentResult)
        {
            byte[] pdfBytes = fileContentResult.FileContents;
            receipt.PDF = "data:application/pdf;base64," + Convert.ToBase64String(pdfBytes);
            IsLoading = false;
        }

    }
    public void Toggle()
    {
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
    }
    private async Task Filter()
    {
        await GetReceipts(parameter);
        Toggle();
    }
    private string SelectedType(List<string> types)
    {
        var tType = "";
        foreach (var item in parameter.ListOfTransaction)
        {
        tType = string.Join(", ", parameter.ListOfTransaction.Select(x => Extensions.GetEnumDescription(x)));      
        }
        return $"{tType}";
    }
}